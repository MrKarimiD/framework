// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "world.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace world {

namespace {

const ::google::protobuf::Descriptor* Geometry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Geometry_reflection_ = NULL;
const ::google::protobuf::Descriptor* BallPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BallPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ball_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ball_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* Robot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Robot_reflection_ = NULL;
const ::google::protobuf::Descriptor* State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  State_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_world_2eproto() {
  protobuf_AddDesc_world_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "world.proto");
  GOOGLE_CHECK(file != NULL);
  Geometry_descriptor_ = file->message_type(0);
  static const int Geometry_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, line_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, field_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, field_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, boundary_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, referee_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, goal_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, goal_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, goal_wall_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, center_circle_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, defense_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, defense_stretch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, free_kick_from_defense_dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, penalty_spot_from_field_line_dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, penalty_line_from_spot_dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, goal_height_),
  };
  Geometry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Geometry_descriptor_,
      Geometry::default_instance_,
      Geometry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geometry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Geometry));
  BallPosition_descriptor_ = file->message_type(1);
  static const int BallPosition_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPosition, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPosition, p_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPosition, p_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPosition, v_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPosition, v_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPosition, system_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPosition, time_diff_scaled_),
  };
  BallPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BallPosition_descriptor_,
      BallPosition::default_instance_,
      BallPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BallPosition));
  Ball_descriptor_ = file->message_type(2);
  static const int Ball_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, p_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, p_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, v_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, v_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, raw_),
  };
  Ball_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ball_descriptor_,
      Ball::default_instance_,
      Ball_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ball, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ball));
  RobotPosition_descriptor_ = file->message_type(3);
  static const int RobotPosition_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPosition, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPosition, p_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPosition, p_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPosition, phi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPosition, v_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPosition, v_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPosition, system_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPosition, time_diff_scaled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPosition, omega_),
  };
  RobotPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotPosition_descriptor_,
      RobotPosition::default_instance_,
      RobotPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotPosition));
  Robot_descriptor_ = file->message_type(4);
  static const int Robot_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, p_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, p_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, phi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, v_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, v_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, omega_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, raw_),
  };
  Robot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Robot_descriptor_,
      Robot::default_instance_,
      Robot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Robot));
  State_descriptor_ = file->message_type(5);
  static const int State_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, ball_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, yellow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, blue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, radio_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, is_simulated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, has_vision_data_),
  };
  State_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      State_descriptor_,
      State::default_instance_,
      State_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(State));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_world_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Geometry_descriptor_, &Geometry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BallPosition_descriptor_, &BallPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ball_descriptor_, &Ball::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotPosition_descriptor_, &RobotPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Robot_descriptor_, &Robot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    State_descriptor_, &State::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_world_2eproto() {
  delete Geometry::default_instance_;
  delete Geometry_reflection_;
  delete BallPosition::default_instance_;
  delete BallPosition_reflection_;
  delete Ball::default_instance_;
  delete Ball_reflection_;
  delete RobotPosition::default_instance_;
  delete RobotPosition_reflection_;
  delete Robot::default_instance_;
  delete Robot_reflection_;
  delete State::default_instance_;
  delete State_reflection_;
}

void protobuf_AddDesc_world_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::robot::protobuf_AddDesc_robot_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013world.proto\022\005world\032\013robot.proto\"\222\003\n\010Ge"
    "ometry\022\022\n\nline_width\030\001 \002(\002\022\023\n\013field_widt"
    "h\030\002 \002(\002\022\024\n\014field_height\030\003 \002(\002\022\026\n\016boundar"
    "y_width\030\004 \002(\002\022\025\n\rreferee_width\030\005 \002(\002\022\022\n\n"
    "goal_width\030\006 \002(\002\022\022\n\ngoal_depth\030\007 \002(\002\022\027\n\017"
    "goal_wall_width\030\010 \002(\002\022\034\n\024center_circle_r"
    "adius\030\t \002(\002\022\026\n\016defense_radius\030\n \002(\002\022\027\n\017d"
    "efense_stretch\030\013 \002(\002\022#\n\033free_kick_from_d"
    "efense_dist\030\014 \002(\002\022)\n!penalty_spot_from_f"
    "ield_line_dist\030\r \002(\002\022#\n\033penalty_line_fro"
    "m_spot_dist\030\016 \002(\002\022\023\n\013goal_height\030\017 \002(\002\"\200"
    "\001\n\014BallPosition\022\014\n\004time\030\001 \002(\003\022\013\n\003p_x\030\002 \002"
    "(\002\022\013\n\003p_y\030\003 \002(\002\022\013\n\003v_x\030\005 \001(\002\022\013\n\003v_y\030\006 \001("
    "\002\022\024\n\014system_delay\030\007 \001(\002\022\030\n\020time_diff_sca"
    "led\030\010 \001(\002\"\\\n\004Ball\022\013\n\003p_x\030\001 \002(\002\022\013\n\003p_y\030\002 "
    "\002(\002\022\013\n\003v_x\030\003 \002(\002\022\013\n\003v_y\030\004 \002(\002\022 \n\003raw\030\005 \003"
    "(\0132\023.world.BallPosition\"\235\001\n\rRobotPositio"
    "n\022\014\n\004time\030\001 \002(\003\022\013\n\003p_x\030\002 \002(\002\022\013\n\003p_y\030\003 \002("
    "\002\022\013\n\003phi\030\004 \002(\002\022\013\n\003v_x\030\005 \001(\002\022\013\n\003v_y\030\006 \001(\002"
    "\022\024\n\014system_delay\030\007 \001(\002\022\030\n\020time_diff_scal"
    "ed\030\010 \001(\002\022\r\n\005omega\030\t \001(\002\"\206\001\n\005Robot\022\n\n\002id\030"
    "\001 \002(\r\022\013\n\003p_x\030\002 \002(\002\022\013\n\003p_y\030\003 \002(\002\022\013\n\003phi\030\004"
    " \002(\002\022\013\n\003v_x\030\005 \002(\002\022\013\n\003v_y\030\006 \002(\002\022\r\n\005omega\030"
    "\007 \002(\002\022!\n\003raw\030\010 \003(\0132\024.world.RobotPosition"
    "\"\307\001\n\005State\022\014\n\004time\030\001 \002(\003\022\031\n\004ball\030\002 \001(\0132\013"
    ".world.Ball\022\034\n\006yellow\030\003 \003(\0132\014.world.Robo"
    "t\022\032\n\004blue\030\004 \003(\0132\014.world.Robot\022,\n\016radio_r"
    "esponse\030\005 \003(\0132\024.robot.RadioResponse\022\024\n\014i"
    "s_simulated\030\006 \001(\010\022\027\n\017has_vision_data\030\007 \001"
    "(\010", 1162);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "world.proto", &protobuf_RegisterTypes);
  Geometry::default_instance_ = new Geometry();
  BallPosition::default_instance_ = new BallPosition();
  Ball::default_instance_ = new Ball();
  RobotPosition::default_instance_ = new RobotPosition();
  Robot::default_instance_ = new Robot();
  State::default_instance_ = new State();
  Geometry::default_instance_->InitAsDefaultInstance();
  BallPosition::default_instance_->InitAsDefaultInstance();
  Ball::default_instance_->InitAsDefaultInstance();
  RobotPosition::default_instance_->InitAsDefaultInstance();
  Robot::default_instance_->InitAsDefaultInstance();
  State::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_world_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_world_2eproto {
  StaticDescriptorInitializer_world_2eproto() {
    protobuf_AddDesc_world_2eproto();
  }
} static_descriptor_initializer_world_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Geometry::kLineWidthFieldNumber;
const int Geometry::kFieldWidthFieldNumber;
const int Geometry::kFieldHeightFieldNumber;
const int Geometry::kBoundaryWidthFieldNumber;
const int Geometry::kRefereeWidthFieldNumber;
const int Geometry::kGoalWidthFieldNumber;
const int Geometry::kGoalDepthFieldNumber;
const int Geometry::kGoalWallWidthFieldNumber;
const int Geometry::kCenterCircleRadiusFieldNumber;
const int Geometry::kDefenseRadiusFieldNumber;
const int Geometry::kDefenseStretchFieldNumber;
const int Geometry::kFreeKickFromDefenseDistFieldNumber;
const int Geometry::kPenaltySpotFromFieldLineDistFieldNumber;
const int Geometry::kPenaltyLineFromSpotDistFieldNumber;
const int Geometry::kGoalHeightFieldNumber;
#endif  // !_MSC_VER

Geometry::Geometry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Geometry::InitAsDefaultInstance() {
}

Geometry::Geometry(const Geometry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Geometry::SharedCtor() {
  _cached_size_ = 0;
  line_width_ = 0;
  field_width_ = 0;
  field_height_ = 0;
  boundary_width_ = 0;
  referee_width_ = 0;
  goal_width_ = 0;
  goal_depth_ = 0;
  goal_wall_width_ = 0;
  center_circle_radius_ = 0;
  defense_radius_ = 0;
  defense_stretch_ = 0;
  free_kick_from_defense_dist_ = 0;
  penalty_spot_from_field_line_dist_ = 0;
  penalty_line_from_spot_dist_ = 0;
  goal_height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Geometry::~Geometry() {
  SharedDtor();
}

void Geometry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Geometry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Geometry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Geometry_descriptor_;
}

const Geometry& Geometry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_2eproto();
  return *default_instance_;
}

Geometry* Geometry::default_instance_ = NULL;

Geometry* Geometry::New() const {
  return new Geometry;
}

void Geometry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    line_width_ = 0;
    field_width_ = 0;
    field_height_ = 0;
    boundary_width_ = 0;
    referee_width_ = 0;
    goal_width_ = 0;
    goal_depth_ = 0;
    goal_wall_width_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    center_circle_radius_ = 0;
    defense_radius_ = 0;
    defense_stretch_ = 0;
    free_kick_from_defense_dist_ = 0;
    penalty_spot_from_field_line_dist_ = 0;
    penalty_line_from_spot_dist_ = 0;
    goal_height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Geometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float line_width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &line_width_)));
          set_has_line_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_field_width;
        break;
      }

      // required float field_width = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_field_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &field_width_)));
          set_has_field_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_field_height;
        break;
      }

      // required float field_height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_field_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &field_height_)));
          set_has_field_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_boundary_width;
        break;
      }

      // required float boundary_width = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_boundary_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &boundary_width_)));
          set_has_boundary_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_referee_width;
        break;
      }

      // required float referee_width = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_referee_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &referee_width_)));
          set_has_referee_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_goal_width;
        break;
      }

      // required float goal_width = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_goal_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &goal_width_)));
          set_has_goal_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_goal_depth;
        break;
      }

      // required float goal_depth = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_goal_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &goal_depth_)));
          set_has_goal_depth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_goal_wall_width;
        break;
      }

      // required float goal_wall_width = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_goal_wall_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &goal_wall_width_)));
          set_has_goal_wall_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_center_circle_radius;
        break;
      }

      // required float center_circle_radius = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_center_circle_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &center_circle_radius_)));
          set_has_center_circle_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_defense_radius;
        break;
      }

      // required float defense_radius = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_defense_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &defense_radius_)));
          set_has_defense_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_defense_stretch;
        break;
      }

      // required float defense_stretch = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_defense_stretch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &defense_stretch_)));
          set_has_defense_stretch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_free_kick_from_defense_dist;
        break;
      }

      // required float free_kick_from_defense_dist = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_free_kick_from_defense_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &free_kick_from_defense_dist_)));
          set_has_free_kick_from_defense_dist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_penalty_spot_from_field_line_dist;
        break;
      }

      // required float penalty_spot_from_field_line_dist = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_penalty_spot_from_field_line_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &penalty_spot_from_field_line_dist_)));
          set_has_penalty_spot_from_field_line_dist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_penalty_line_from_spot_dist;
        break;
      }

      // required float penalty_line_from_spot_dist = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_penalty_line_from_spot_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &penalty_line_from_spot_dist_)));
          set_has_penalty_line_from_spot_dist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_goal_height;
        break;
      }

      // required float goal_height = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_goal_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &goal_height_)));
          set_has_goal_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Geometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float line_width = 1;
  if (has_line_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->line_width(), output);
  }

  // required float field_width = 2;
  if (has_field_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->field_width(), output);
  }

  // required float field_height = 3;
  if (has_field_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->field_height(), output);
  }

  // required float boundary_width = 4;
  if (has_boundary_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->boundary_width(), output);
  }

  // required float referee_width = 5;
  if (has_referee_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->referee_width(), output);
  }

  // required float goal_width = 6;
  if (has_goal_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->goal_width(), output);
  }

  // required float goal_depth = 7;
  if (has_goal_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->goal_depth(), output);
  }

  // required float goal_wall_width = 8;
  if (has_goal_wall_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->goal_wall_width(), output);
  }

  // required float center_circle_radius = 9;
  if (has_center_circle_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->center_circle_radius(), output);
  }

  // required float defense_radius = 10;
  if (has_defense_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->defense_radius(), output);
  }

  // required float defense_stretch = 11;
  if (has_defense_stretch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->defense_stretch(), output);
  }

  // required float free_kick_from_defense_dist = 12;
  if (has_free_kick_from_defense_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->free_kick_from_defense_dist(), output);
  }

  // required float penalty_spot_from_field_line_dist = 13;
  if (has_penalty_spot_from_field_line_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->penalty_spot_from_field_line_dist(), output);
  }

  // required float penalty_line_from_spot_dist = 14;
  if (has_penalty_line_from_spot_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->penalty_line_from_spot_dist(), output);
  }

  // required float goal_height = 15;
  if (has_goal_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->goal_height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Geometry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float line_width = 1;
  if (has_line_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->line_width(), target);
  }

  // required float field_width = 2;
  if (has_field_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->field_width(), target);
  }

  // required float field_height = 3;
  if (has_field_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->field_height(), target);
  }

  // required float boundary_width = 4;
  if (has_boundary_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->boundary_width(), target);
  }

  // required float referee_width = 5;
  if (has_referee_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->referee_width(), target);
  }

  // required float goal_width = 6;
  if (has_goal_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->goal_width(), target);
  }

  // required float goal_depth = 7;
  if (has_goal_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->goal_depth(), target);
  }

  // required float goal_wall_width = 8;
  if (has_goal_wall_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->goal_wall_width(), target);
  }

  // required float center_circle_radius = 9;
  if (has_center_circle_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->center_circle_radius(), target);
  }

  // required float defense_radius = 10;
  if (has_defense_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->defense_radius(), target);
  }

  // required float defense_stretch = 11;
  if (has_defense_stretch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->defense_stretch(), target);
  }

  // required float free_kick_from_defense_dist = 12;
  if (has_free_kick_from_defense_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->free_kick_from_defense_dist(), target);
  }

  // required float penalty_spot_from_field_line_dist = 13;
  if (has_penalty_spot_from_field_line_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->penalty_spot_from_field_line_dist(), target);
  }

  // required float penalty_line_from_spot_dist = 14;
  if (has_penalty_line_from_spot_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->penalty_line_from_spot_dist(), target);
  }

  // required float goal_height = 15;
  if (has_goal_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->goal_height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Geometry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float line_width = 1;
    if (has_line_width()) {
      total_size += 1 + 4;
    }

    // required float field_width = 2;
    if (has_field_width()) {
      total_size += 1 + 4;
    }

    // required float field_height = 3;
    if (has_field_height()) {
      total_size += 1 + 4;
    }

    // required float boundary_width = 4;
    if (has_boundary_width()) {
      total_size += 1 + 4;
    }

    // required float referee_width = 5;
    if (has_referee_width()) {
      total_size += 1 + 4;
    }

    // required float goal_width = 6;
    if (has_goal_width()) {
      total_size += 1 + 4;
    }

    // required float goal_depth = 7;
    if (has_goal_depth()) {
      total_size += 1 + 4;
    }

    // required float goal_wall_width = 8;
    if (has_goal_wall_width()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float center_circle_radius = 9;
    if (has_center_circle_radius()) {
      total_size += 1 + 4;
    }

    // required float defense_radius = 10;
    if (has_defense_radius()) {
      total_size += 1 + 4;
    }

    // required float defense_stretch = 11;
    if (has_defense_stretch()) {
      total_size += 1 + 4;
    }

    // required float free_kick_from_defense_dist = 12;
    if (has_free_kick_from_defense_dist()) {
      total_size += 1 + 4;
    }

    // required float penalty_spot_from_field_line_dist = 13;
    if (has_penalty_spot_from_field_line_dist()) {
      total_size += 1 + 4;
    }

    // required float penalty_line_from_spot_dist = 14;
    if (has_penalty_line_from_spot_dist()) {
      total_size += 1 + 4;
    }

    // required float goal_height = 15;
    if (has_goal_height()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Geometry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Geometry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Geometry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Geometry::MergeFrom(const Geometry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_line_width()) {
      set_line_width(from.line_width());
    }
    if (from.has_field_width()) {
      set_field_width(from.field_width());
    }
    if (from.has_field_height()) {
      set_field_height(from.field_height());
    }
    if (from.has_boundary_width()) {
      set_boundary_width(from.boundary_width());
    }
    if (from.has_referee_width()) {
      set_referee_width(from.referee_width());
    }
    if (from.has_goal_width()) {
      set_goal_width(from.goal_width());
    }
    if (from.has_goal_depth()) {
      set_goal_depth(from.goal_depth());
    }
    if (from.has_goal_wall_width()) {
      set_goal_wall_width(from.goal_wall_width());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_center_circle_radius()) {
      set_center_circle_radius(from.center_circle_radius());
    }
    if (from.has_defense_radius()) {
      set_defense_radius(from.defense_radius());
    }
    if (from.has_defense_stretch()) {
      set_defense_stretch(from.defense_stretch());
    }
    if (from.has_free_kick_from_defense_dist()) {
      set_free_kick_from_defense_dist(from.free_kick_from_defense_dist());
    }
    if (from.has_penalty_spot_from_field_line_dist()) {
      set_penalty_spot_from_field_line_dist(from.penalty_spot_from_field_line_dist());
    }
    if (from.has_penalty_line_from_spot_dist()) {
      set_penalty_line_from_spot_dist(from.penalty_line_from_spot_dist());
    }
    if (from.has_goal_height()) {
      set_goal_height(from.goal_height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Geometry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Geometry::CopyFrom(const Geometry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geometry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;

  return true;
}

void Geometry::Swap(Geometry* other) {
  if (other != this) {
    std::swap(line_width_, other->line_width_);
    std::swap(field_width_, other->field_width_);
    std::swap(field_height_, other->field_height_);
    std::swap(boundary_width_, other->boundary_width_);
    std::swap(referee_width_, other->referee_width_);
    std::swap(goal_width_, other->goal_width_);
    std::swap(goal_depth_, other->goal_depth_);
    std::swap(goal_wall_width_, other->goal_wall_width_);
    std::swap(center_circle_radius_, other->center_circle_radius_);
    std::swap(defense_radius_, other->defense_radius_);
    std::swap(defense_stretch_, other->defense_stretch_);
    std::swap(free_kick_from_defense_dist_, other->free_kick_from_defense_dist_);
    std::swap(penalty_spot_from_field_line_dist_, other->penalty_spot_from_field_line_dist_);
    std::swap(penalty_line_from_spot_dist_, other->penalty_line_from_spot_dist_);
    std::swap(goal_height_, other->goal_height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Geometry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Geometry_descriptor_;
  metadata.reflection = Geometry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BallPosition::kTimeFieldNumber;
const int BallPosition::kPXFieldNumber;
const int BallPosition::kPYFieldNumber;
const int BallPosition::kVXFieldNumber;
const int BallPosition::kVYFieldNumber;
const int BallPosition::kSystemDelayFieldNumber;
const int BallPosition::kTimeDiffScaledFieldNumber;
#endif  // !_MSC_VER

BallPosition::BallPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BallPosition::InitAsDefaultInstance() {
}

BallPosition::BallPosition(const BallPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BallPosition::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  p_x_ = 0;
  p_y_ = 0;
  v_x_ = 0;
  v_y_ = 0;
  system_delay_ = 0;
  time_diff_scaled_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BallPosition::~BallPosition() {
  SharedDtor();
}

void BallPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BallPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BallPosition_descriptor_;
}

const BallPosition& BallPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_2eproto();
  return *default_instance_;
}

BallPosition* BallPosition::default_instance_ = NULL;

BallPosition* BallPosition::New() const {
  return new BallPosition;
}

void BallPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    p_x_ = 0;
    p_y_ = 0;
    v_x_ = 0;
    v_y_ = 0;
    system_delay_ = 0;
    time_diff_scaled_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BallPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_p_x;
        break;
      }

      // required float p_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_p_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &p_x_)));
          set_has_p_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_p_y;
        break;
      }

      // required float p_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_p_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &p_y_)));
          set_has_p_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_v_x;
        break;
      }

      // optional float v_x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_v_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_x_)));
          set_has_v_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_v_y;
        break;
      }

      // optional float v_y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_v_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_y_)));
          set_has_v_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_system_delay;
        break;
      }

      // optional float system_delay = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_system_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &system_delay_)));
          set_has_system_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_time_diff_scaled;
        break;
      }

      // optional float time_diff_scaled = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time_diff_scaled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_diff_scaled_)));
          set_has_time_diff_scaled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BallPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // required float p_x = 2;
  if (has_p_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->p_x(), output);
  }

  // required float p_y = 3;
  if (has_p_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->p_y(), output);
  }

  // optional float v_x = 5;
  if (has_v_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->v_x(), output);
  }

  // optional float v_y = 6;
  if (has_v_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->v_y(), output);
  }

  // optional float system_delay = 7;
  if (has_system_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->system_delay(), output);
  }

  // optional float time_diff_scaled = 8;
  if (has_time_diff_scaled()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->time_diff_scaled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BallPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // required float p_x = 2;
  if (has_p_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->p_x(), target);
  }

  // required float p_y = 3;
  if (has_p_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->p_y(), target);
  }

  // optional float v_x = 5;
  if (has_v_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->v_x(), target);
  }

  // optional float v_y = 6;
  if (has_v_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->v_y(), target);
  }

  // optional float system_delay = 7;
  if (has_system_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->system_delay(), target);
  }

  // optional float time_diff_scaled = 8;
  if (has_time_diff_scaled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->time_diff_scaled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BallPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // required float p_x = 2;
    if (has_p_x()) {
      total_size += 1 + 4;
    }

    // required float p_y = 3;
    if (has_p_y()) {
      total_size += 1 + 4;
    }

    // optional float v_x = 5;
    if (has_v_x()) {
      total_size += 1 + 4;
    }

    // optional float v_y = 6;
    if (has_v_y()) {
      total_size += 1 + 4;
    }

    // optional float system_delay = 7;
    if (has_system_delay()) {
      total_size += 1 + 4;
    }

    // optional float time_diff_scaled = 8;
    if (has_time_diff_scaled()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BallPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BallPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BallPosition::MergeFrom(const BallPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_p_x()) {
      set_p_x(from.p_x());
    }
    if (from.has_p_y()) {
      set_p_y(from.p_y());
    }
    if (from.has_v_x()) {
      set_v_x(from.v_x());
    }
    if (from.has_v_y()) {
      set_v_y(from.v_y());
    }
    if (from.has_system_delay()) {
      set_system_delay(from.system_delay());
    }
    if (from.has_time_diff_scaled()) {
      set_time_diff_scaled(from.time_diff_scaled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BallPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallPosition::CopyFrom(const BallPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallPosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BallPosition::Swap(BallPosition* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(p_x_, other->p_x_);
    std::swap(p_y_, other->p_y_);
    std::swap(v_x_, other->v_x_);
    std::swap(v_y_, other->v_y_);
    std::swap(system_delay_, other->system_delay_);
    std::swap(time_diff_scaled_, other->time_diff_scaled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BallPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BallPosition_descriptor_;
  metadata.reflection = BallPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ball::kPXFieldNumber;
const int Ball::kPYFieldNumber;
const int Ball::kVXFieldNumber;
const int Ball::kVYFieldNumber;
const int Ball::kRawFieldNumber;
#endif  // !_MSC_VER

Ball::Ball()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ball::InitAsDefaultInstance() {
}

Ball::Ball(const Ball& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ball::SharedCtor() {
  _cached_size_ = 0;
  p_x_ = 0;
  p_y_ = 0;
  v_x_ = 0;
  v_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ball::~Ball() {
  SharedDtor();
}

void Ball::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ball::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ball::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ball_descriptor_;
}

const Ball& Ball::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_2eproto();
  return *default_instance_;
}

Ball* Ball::default_instance_ = NULL;

Ball* Ball::New() const {
  return new Ball;
}

void Ball::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    p_x_ = 0;
    p_y_ = 0;
    v_x_ = 0;
    v_y_ = 0;
  }
  raw_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ball::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float p_x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &p_x_)));
          set_has_p_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_p_y;
        break;
      }

      // required float p_y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_p_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &p_y_)));
          set_has_p_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_v_x;
        break;
      }

      // required float v_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_v_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_x_)));
          set_has_v_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_v_y;
        break;
      }

      // required float v_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_v_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_y_)));
          set_has_v_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_raw;
        break;
      }

      // repeated .world.BallPosition raw = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_raw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_raw;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ball::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float p_x = 1;
  if (has_p_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->p_x(), output);
  }

  // required float p_y = 2;
  if (has_p_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->p_y(), output);
  }

  // required float v_x = 3;
  if (has_v_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->v_x(), output);
  }

  // required float v_y = 4;
  if (has_v_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->v_y(), output);
  }

  // repeated .world.BallPosition raw = 5;
  for (int i = 0; i < this->raw_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->raw(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ball::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float p_x = 1;
  if (has_p_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->p_x(), target);
  }

  // required float p_y = 2;
  if (has_p_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->p_y(), target);
  }

  // required float v_x = 3;
  if (has_v_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->v_x(), target);
  }

  // required float v_y = 4;
  if (has_v_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->v_y(), target);
  }

  // repeated .world.BallPosition raw = 5;
  for (int i = 0; i < this->raw_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->raw(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ball::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float p_x = 1;
    if (has_p_x()) {
      total_size += 1 + 4;
    }

    // required float p_y = 2;
    if (has_p_y()) {
      total_size += 1 + 4;
    }

    // required float v_x = 3;
    if (has_v_x()) {
      total_size += 1 + 4;
    }

    // required float v_y = 4;
    if (has_v_y()) {
      total_size += 1 + 4;
    }

  }
  // repeated .world.BallPosition raw = 5;
  total_size += 1 * this->raw_size();
  for (int i = 0; i < this->raw_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->raw(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ball::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ball* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ball*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ball::MergeFrom(const Ball& from) {
  GOOGLE_CHECK_NE(&from, this);
  raw_.MergeFrom(from.raw_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_p_x()) {
      set_p_x(from.p_x());
    }
    if (from.has_p_y()) {
      set_p_y(from.p_y());
    }
    if (from.has_v_x()) {
      set_v_x(from.v_x());
    }
    if (from.has_v_y()) {
      set_v_y(from.v_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ball::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ball::CopyFrom(const Ball& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ball::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < raw_size(); i++) {
    if (!this->raw(i).IsInitialized()) return false;
  }
  return true;
}

void Ball::Swap(Ball* other) {
  if (other != this) {
    std::swap(p_x_, other->p_x_);
    std::swap(p_y_, other->p_y_);
    std::swap(v_x_, other->v_x_);
    std::swap(v_y_, other->v_y_);
    raw_.Swap(&other->raw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ball::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ball_descriptor_;
  metadata.reflection = Ball_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RobotPosition::kTimeFieldNumber;
const int RobotPosition::kPXFieldNumber;
const int RobotPosition::kPYFieldNumber;
const int RobotPosition::kPhiFieldNumber;
const int RobotPosition::kVXFieldNumber;
const int RobotPosition::kVYFieldNumber;
const int RobotPosition::kSystemDelayFieldNumber;
const int RobotPosition::kTimeDiffScaledFieldNumber;
const int RobotPosition::kOmegaFieldNumber;
#endif  // !_MSC_VER

RobotPosition::RobotPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RobotPosition::InitAsDefaultInstance() {
}

RobotPosition::RobotPosition(const RobotPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RobotPosition::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  p_x_ = 0;
  p_y_ = 0;
  phi_ = 0;
  v_x_ = 0;
  v_y_ = 0;
  system_delay_ = 0;
  time_diff_scaled_ = 0;
  omega_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotPosition::~RobotPosition() {
  SharedDtor();
}

void RobotPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RobotPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotPosition_descriptor_;
}

const RobotPosition& RobotPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_2eproto();
  return *default_instance_;
}

RobotPosition* RobotPosition::default_instance_ = NULL;

RobotPosition* RobotPosition::New() const {
  return new RobotPosition;
}

void RobotPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    p_x_ = 0;
    p_y_ = 0;
    phi_ = 0;
    v_x_ = 0;
    v_y_ = 0;
    system_delay_ = 0;
    time_diff_scaled_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    omega_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_p_x;
        break;
      }

      // required float p_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_p_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &p_x_)));
          set_has_p_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_p_y;
        break;
      }

      // required float p_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_p_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &p_y_)));
          set_has_p_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_phi;
        break;
      }

      // required float phi = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_phi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phi_)));
          set_has_phi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_v_x;
        break;
      }

      // optional float v_x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_v_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_x_)));
          set_has_v_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_v_y;
        break;
      }

      // optional float v_y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_v_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_y_)));
          set_has_v_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_system_delay;
        break;
      }

      // optional float system_delay = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_system_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &system_delay_)));
          set_has_system_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_time_diff_scaled;
        break;
      }

      // optional float time_diff_scaled = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time_diff_scaled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_diff_scaled_)));
          set_has_time_diff_scaled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_omega;
        break;
      }

      // optional float omega = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_omega:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &omega_)));
          set_has_omega();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RobotPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // required float p_x = 2;
  if (has_p_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->p_x(), output);
  }

  // required float p_y = 3;
  if (has_p_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->p_y(), output);
  }

  // required float phi = 4;
  if (has_phi()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->phi(), output);
  }

  // optional float v_x = 5;
  if (has_v_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->v_x(), output);
  }

  // optional float v_y = 6;
  if (has_v_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->v_y(), output);
  }

  // optional float system_delay = 7;
  if (has_system_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->system_delay(), output);
  }

  // optional float time_diff_scaled = 8;
  if (has_time_diff_scaled()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->time_diff_scaled(), output);
  }

  // optional float omega = 9;
  if (has_omega()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->omega(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RobotPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // required float p_x = 2;
  if (has_p_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->p_x(), target);
  }

  // required float p_y = 3;
  if (has_p_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->p_y(), target);
  }

  // required float phi = 4;
  if (has_phi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->phi(), target);
  }

  // optional float v_x = 5;
  if (has_v_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->v_x(), target);
  }

  // optional float v_y = 6;
  if (has_v_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->v_y(), target);
  }

  // optional float system_delay = 7;
  if (has_system_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->system_delay(), target);
  }

  // optional float time_diff_scaled = 8;
  if (has_time_diff_scaled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->time_diff_scaled(), target);
  }

  // optional float omega = 9;
  if (has_omega()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->omega(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RobotPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // required float p_x = 2;
    if (has_p_x()) {
      total_size += 1 + 4;
    }

    // required float p_y = 3;
    if (has_p_y()) {
      total_size += 1 + 4;
    }

    // required float phi = 4;
    if (has_phi()) {
      total_size += 1 + 4;
    }

    // optional float v_x = 5;
    if (has_v_x()) {
      total_size += 1 + 4;
    }

    // optional float v_y = 6;
    if (has_v_y()) {
      total_size += 1 + 4;
    }

    // optional float system_delay = 7;
    if (has_system_delay()) {
      total_size += 1 + 4;
    }

    // optional float time_diff_scaled = 8;
    if (has_time_diff_scaled()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float omega = 9;
    if (has_omega()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotPosition::MergeFrom(const RobotPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_p_x()) {
      set_p_x(from.p_x());
    }
    if (from.has_p_y()) {
      set_p_y(from.p_y());
    }
    if (from.has_phi()) {
      set_phi(from.phi());
    }
    if (from.has_v_x()) {
      set_v_x(from.v_x());
    }
    if (from.has_v_y()) {
      set_v_y(from.v_y());
    }
    if (from.has_system_delay()) {
      set_system_delay(from.system_delay());
    }
    if (from.has_time_diff_scaled()) {
      set_time_diff_scaled(from.time_diff_scaled());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_omega()) {
      set_omega(from.omega());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotPosition::CopyFrom(const RobotPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotPosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RobotPosition::Swap(RobotPosition* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(p_x_, other->p_x_);
    std::swap(p_y_, other->p_y_);
    std::swap(phi_, other->phi_);
    std::swap(v_x_, other->v_x_);
    std::swap(v_y_, other->v_y_);
    std::swap(system_delay_, other->system_delay_);
    std::swap(time_diff_scaled_, other->time_diff_scaled_);
    std::swap(omega_, other->omega_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotPosition_descriptor_;
  metadata.reflection = RobotPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Robot::kIdFieldNumber;
const int Robot::kPXFieldNumber;
const int Robot::kPYFieldNumber;
const int Robot::kPhiFieldNumber;
const int Robot::kVXFieldNumber;
const int Robot::kVYFieldNumber;
const int Robot::kOmegaFieldNumber;
const int Robot::kRawFieldNumber;
#endif  // !_MSC_VER

Robot::Robot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Robot::InitAsDefaultInstance() {
}

Robot::Robot(const Robot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Robot::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  p_x_ = 0;
  p_y_ = 0;
  phi_ = 0;
  v_x_ = 0;
  v_y_ = 0;
  omega_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Robot::~Robot() {
  SharedDtor();
}

void Robot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Robot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Robot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Robot_descriptor_;
}

const Robot& Robot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_2eproto();
  return *default_instance_;
}

Robot* Robot::default_instance_ = NULL;

Robot* Robot::New() const {
  return new Robot;
}

void Robot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    p_x_ = 0;
    p_y_ = 0;
    phi_ = 0;
    v_x_ = 0;
    v_y_ = 0;
    omega_ = 0;
  }
  raw_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Robot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_p_x;
        break;
      }

      // required float p_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_p_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &p_x_)));
          set_has_p_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_p_y;
        break;
      }

      // required float p_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_p_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &p_y_)));
          set_has_p_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_phi;
        break;
      }

      // required float phi = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_phi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phi_)));
          set_has_phi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_v_x;
        break;
      }

      // required float v_x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_v_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_x_)));
          set_has_v_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_v_y;
        break;
      }

      // required float v_y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_v_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_y_)));
          set_has_v_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_omega;
        break;
      }

      // required float omega = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_omega:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &omega_)));
          set_has_omega();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_raw;
        break;
      }

      // repeated .world.RobotPosition raw = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_raw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_raw;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Robot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required float p_x = 2;
  if (has_p_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->p_x(), output);
  }

  // required float p_y = 3;
  if (has_p_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->p_y(), output);
  }

  // required float phi = 4;
  if (has_phi()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->phi(), output);
  }

  // required float v_x = 5;
  if (has_v_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->v_x(), output);
  }

  // required float v_y = 6;
  if (has_v_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->v_y(), output);
  }

  // required float omega = 7;
  if (has_omega()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->omega(), output);
  }

  // repeated .world.RobotPosition raw = 8;
  for (int i = 0; i < this->raw_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->raw(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Robot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required float p_x = 2;
  if (has_p_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->p_x(), target);
  }

  // required float p_y = 3;
  if (has_p_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->p_y(), target);
  }

  // required float phi = 4;
  if (has_phi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->phi(), target);
  }

  // required float v_x = 5;
  if (has_v_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->v_x(), target);
  }

  // required float v_y = 6;
  if (has_v_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->v_y(), target);
  }

  // required float omega = 7;
  if (has_omega()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->omega(), target);
  }

  // repeated .world.RobotPosition raw = 8;
  for (int i = 0; i < this->raw_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->raw(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Robot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required float p_x = 2;
    if (has_p_x()) {
      total_size += 1 + 4;
    }

    // required float p_y = 3;
    if (has_p_y()) {
      total_size += 1 + 4;
    }

    // required float phi = 4;
    if (has_phi()) {
      total_size += 1 + 4;
    }

    // required float v_x = 5;
    if (has_v_x()) {
      total_size += 1 + 4;
    }

    // required float v_y = 6;
    if (has_v_y()) {
      total_size += 1 + 4;
    }

    // required float omega = 7;
    if (has_omega()) {
      total_size += 1 + 4;
    }

  }
  // repeated .world.RobotPosition raw = 8;
  total_size += 1 * this->raw_size();
  for (int i = 0; i < this->raw_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->raw(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Robot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Robot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Robot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Robot::MergeFrom(const Robot& from) {
  GOOGLE_CHECK_NE(&from, this);
  raw_.MergeFrom(from.raw_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_p_x()) {
      set_p_x(from.p_x());
    }
    if (from.has_p_y()) {
      set_p_y(from.p_y());
    }
    if (from.has_phi()) {
      set_phi(from.phi());
    }
    if (from.has_v_x()) {
      set_v_x(from.v_x());
    }
    if (from.has_v_y()) {
      set_v_y(from.v_y());
    }
    if (from.has_omega()) {
      set_omega(from.omega());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Robot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot::CopyFrom(const Robot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  for (int i = 0; i < raw_size(); i++) {
    if (!this->raw(i).IsInitialized()) return false;
  }
  return true;
}

void Robot::Swap(Robot* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(p_x_, other->p_x_);
    std::swap(p_y_, other->p_y_);
    std::swap(phi_, other->phi_);
    std::swap(v_x_, other->v_x_);
    std::swap(v_y_, other->v_y_);
    std::swap(omega_, other->omega_);
    raw_.Swap(&other->raw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Robot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Robot_descriptor_;
  metadata.reflection = Robot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int State::kTimeFieldNumber;
const int State::kBallFieldNumber;
const int State::kYellowFieldNumber;
const int State::kBlueFieldNumber;
const int State::kRadioResponseFieldNumber;
const int State::kIsSimulatedFieldNumber;
const int State::kHasVisionDataFieldNumber;
#endif  // !_MSC_VER

State::State()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void State::InitAsDefaultInstance() {
  ball_ = const_cast< ::world::Ball*>(&::world::Ball::default_instance());
}

State::State(const State& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void State::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ball_ = NULL;
  is_simulated_ = false;
  has_vision_data_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

State::~State() {
  SharedDtor();
}

void State::SharedDtor() {
  if (this != default_instance_) {
    delete ball_;
  }
}

void State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return State_descriptor_;
}

const State& State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_2eproto();
  return *default_instance_;
}

State* State::default_instance_ = NULL;

State* State::New() const {
  return new State;
}

void State::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    if (has_ball()) {
      if (ball_ != NULL) ball_->::world::Ball::Clear();
    }
    is_simulated_ = false;
    has_vision_data_ = false;
  }
  yellow_.Clear();
  blue_.Clear();
  radio_response_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ball;
        break;
      }

      // optional .world.Ball ball = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ball:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ball()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_yellow;
        break;
      }

      // repeated .world.Robot yellow = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yellow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yellow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_yellow;
        if (input->ExpectTag(34)) goto parse_blue;
        break;
      }

      // repeated .world.Robot blue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_blue;
        if (input->ExpectTag(42)) goto parse_radio_response;
        break;
      }

      // repeated .robot.RadioResponse radio_response = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_radio_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_radio_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_radio_response;
        if (input->ExpectTag(48)) goto parse_is_simulated;
        break;
      }

      // optional bool is_simulated = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_simulated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_simulated_)));
          set_has_is_simulated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_has_vision_data;
        break;
      }

      // optional bool has_vision_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_vision_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_vision_data_)));
          set_has_has_vision_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional .world.Ball ball = 2;
  if (has_ball()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ball(), output);
  }

  // repeated .world.Robot yellow = 3;
  for (int i = 0; i < this->yellow_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->yellow(i), output);
  }

  // repeated .world.Robot blue = 4;
  for (int i = 0; i < this->blue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->blue(i), output);
  }

  // repeated .robot.RadioResponse radio_response = 5;
  for (int i = 0; i < this->radio_response_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->radio_response(i), output);
  }

  // optional bool is_simulated = 6;
  if (has_is_simulated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_simulated(), output);
  }

  // optional bool has_vision_data = 7;
  if (has_has_vision_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->has_vision_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* State::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional .world.Ball ball = 2;
  if (has_ball()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ball(), target);
  }

  // repeated .world.Robot yellow = 3;
  for (int i = 0; i < this->yellow_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->yellow(i), target);
  }

  // repeated .world.Robot blue = 4;
  for (int i = 0; i < this->blue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->blue(i), target);
  }

  // repeated .robot.RadioResponse radio_response = 5;
  for (int i = 0; i < this->radio_response_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->radio_response(i), target);
  }

  // optional bool is_simulated = 6;
  if (has_is_simulated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_simulated(), target);
  }

  // optional bool has_vision_data = 7;
  if (has_has_vision_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->has_vision_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int State::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional .world.Ball ball = 2;
    if (has_ball()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ball());
    }

    // optional bool is_simulated = 6;
    if (has_is_simulated()) {
      total_size += 1 + 1;
    }

    // optional bool has_vision_data = 7;
    if (has_has_vision_data()) {
      total_size += 1 + 1;
    }

  }
  // repeated .world.Robot yellow = 3;
  total_size += 1 * this->yellow_size();
  for (int i = 0; i < this->yellow_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yellow(i));
  }

  // repeated .world.Robot blue = 4;
  total_size += 1 * this->blue_size();
  for (int i = 0; i < this->blue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blue(i));
  }

  // repeated .robot.RadioResponse radio_response = 5;
  total_size += 1 * this->radio_response_size();
  for (int i = 0; i < this->radio_response_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->radio_response(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void State::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const State* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const State*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
  GOOGLE_CHECK_NE(&from, this);
  yellow_.MergeFrom(from.yellow_);
  blue_.MergeFrom(from.blue_);
  radio_response_.MergeFrom(from.radio_response_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_ball()) {
      mutable_ball()->::world::Ball::MergeFrom(from.ball());
    }
    if (from.has_is_simulated()) {
      set_is_simulated(from.is_simulated());
    }
    if (from.has_has_vision_data()) {
      set_has_vision_data(from.has_vision_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void State::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_ball()) {
    if (!this->ball().IsInitialized()) return false;
  }
  for (int i = 0; i < yellow_size(); i++) {
    if (!this->yellow(i).IsInitialized()) return false;
  }
  for (int i = 0; i < blue_size(); i++) {
    if (!this->blue(i).IsInitialized()) return false;
  }
  for (int i = 0; i < radio_response_size(); i++) {
    if (!this->radio_response(i).IsInitialized()) return false;
  }
  return true;
}

void State::Swap(State* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(ball_, other->ball_);
    yellow_.Swap(&other->yellow_);
    blue_.Swap(&other->blue_);
    radio_response_.Swap(&other->radio_response_);
    std::swap(is_simulated_, other->is_simulated_);
    std::swap(has_vision_data_, other->has_vision_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = State_descriptor_;
  metadata.reflection = State_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace world

// @@protoc_insertion_point(global_scope)
