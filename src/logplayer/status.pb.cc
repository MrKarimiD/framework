// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: status.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "status.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace amun {

namespace {

const ::google::protobuf::Descriptor* StatusStrategy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusStrategy_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StatusStrategy_STATE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Timing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Timing_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusTransceiver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusTransceiver_reflection_ = NULL;
const ::google::protobuf::Descriptor* PortBindError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PortBindError_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusAmun_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusAmun_reflection_ = NULL;
const ::google::protobuf::Descriptor* Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Status_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_status_2eproto() {
  protobuf_AddDesc_status_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "status.proto");
  GOOGLE_CHECK(file != NULL);
  StatusStrategy_descriptor_ = file->message_type(0);
  static const int StatusStrategy_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusStrategy, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusStrategy, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusStrategy, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusStrategy, current_entry_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusStrategy, entry_point_),
  };
  StatusStrategy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusStrategy_descriptor_,
      StatusStrategy::default_instance_,
      StatusStrategy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusStrategy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusStrategy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusStrategy));
  StatusStrategy_STATE_descriptor_ = StatusStrategy_descriptor_->enum_type(0);
  Timing_descriptor_ = file->message_type(1);
  static const int Timing_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timing, blue_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timing, blue_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timing, yellow_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timing, yellow_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timing, tracking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timing, controller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timing, transceiver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timing, transceiver_rtt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timing, simulator_),
  };
  Timing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Timing_descriptor_,
      Timing::default_instance_,
      Timing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Timing));
  StatusTransceiver_descriptor_ = file->message_type(2);
  static const int StatusTransceiver_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusTransceiver, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusTransceiver, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusTransceiver, dropped_usb_packets_),
  };
  StatusTransceiver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusTransceiver_descriptor_,
      StatusTransceiver::default_instance_,
      StatusTransceiver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusTransceiver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusTransceiver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusTransceiver));
  PortBindError_descriptor_ = file->message_type(3);
  static const int PortBindError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortBindError, port_),
  };
  PortBindError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PortBindError_descriptor_,
      PortBindError::default_instance_,
      PortBindError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortBindError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortBindError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PortBindError));
  StatusAmun_descriptor_ = file->message_type(4);
  static const int StatusAmun_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusAmun, port_bind_error_),
  };
  StatusAmun_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusAmun_descriptor_,
      StatusAmun::default_instance_,
      StatusAmun_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusAmun, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusAmun, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusAmun));
  Status_descriptor_ = file->message_type(5);
  static const int Status_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, game_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, world_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, geometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, team_blue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, team_yellow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, strategy_blue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, strategy_yellow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, strategy_autoref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, debug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, timing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, radio_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, transceiver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, user_input_blue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, user_input_yellow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, amun_state_),
  };
  Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Status_descriptor_,
      Status::default_instance_,
      Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Status));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_status_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusStrategy_descriptor_, &StatusStrategy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Timing_descriptor_, &Timing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusTransceiver_descriptor_, &StatusTransceiver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PortBindError_descriptor_, &PortBindError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusAmun_descriptor_, &StatusAmun::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Status_descriptor_, &Status::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_status_2eproto() {
  delete StatusStrategy::default_instance_;
  delete StatusStrategy_reflection_;
  delete Timing::default_instance_;
  delete Timing_reflection_;
  delete StatusTransceiver::default_instance_;
  delete StatusTransceiver_reflection_;
  delete PortBindError::default_instance_;
  delete PortBindError_reflection_;
  delete StatusAmun::default_instance_;
  delete StatusAmun_reflection_;
  delete Status::default_instance_;
  delete Status_reflection_;
}

void protobuf_AddDesc_status_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::amun::protobuf_AddDesc_debug_2eproto();
  ::amun::protobuf_AddDesc_gamestate_2eproto();
  ::robot::protobuf_AddDesc_robot_2eproto();
  ::world::protobuf_AddDesc_world_2eproto();
  ::amun::protobuf_AddDesc_userinput_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014status.proto\022\004amun\032\013debug.proto\032\017games"
    "tate.proto\032\013robot.proto\032\013world.proto\032\017us"
    "erinput.proto\"\273\001\n\016StatusStrategy\022)\n\005stat"
    "e\030\001 \002(\0162\032.amun.StatusStrategy.STATE\022\020\n\010f"
    "ilename\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\033\n\023current_e"
    "ntry_point\030\004 \001(\t\022\023\n\013entry_point\030\005 \003(\t\",\n"
    "\005STATE\022\n\n\006CLOSED\020\001\022\013\n\007RUNNING\020\003\022\n\n\006FAILE"
    "D\020\004\"\301\001\n\006Timing\022\022\n\nblue_total\030\001 \001(\002\022\021\n\tbl"
    "ue_path\030\002 \001(\002\022\024\n\014yellow_total\030\003 \001(\002\022\023\n\013y"
    "ellow_path\030\004 \001(\002\022\020\n\010tracking\030\005 \001(\002\022\022\n\nco"
    "ntroller\030\010 \001(\002\022\023\n\013transceiver\030\006 \001(\002\022\027\n\017t"
    "ransceiver_rtt\030\t \001(\002\022\021\n\tsimulator\030\007 \001(\002\""
    "O\n\021StatusTransceiver\022\016\n\006active\030\001 \002(\010\022\r\n\005"
    "error\030\002 \001(\t\022\033\n\023dropped_usb_packets\030\003 \001(\005"
    "\"\035\n\rPortBindError\022\014\n\004port\030\001 \002(\r\":\n\nStatu"
    "sAmun\022,\n\017port_bind_error\030\001 \001(\0132\023.amun.Po"
    "rtBindError\"\345\004\n\006Status\022\014\n\004time\030\001 \002(\003\022#\n\n"
    "game_state\030\017 \001(\0132\017.amun.GameState\022!\n\013wor"
    "ld_state\030\003 \001(\0132\014.world.State\022!\n\010geometry"
    "\030\004 \001(\0132\017.world.Geometry\022\036\n\tteam_blue\030\005 \001"
    "(\0132\013.robot.Team\022 \n\013team_yellow\030\006 \001(\0132\013.r"
    "obot.Team\022+\n\rstrategy_blue\030\007 \001(\0132\024.amun."
    "StatusStrategy\022-\n\017strategy_yellow\030\010 \001(\0132"
    "\024.amun.StatusStrategy\022.\n\020strategy_autore"
    "f\030\022 \001(\0132\024.amun.StatusStrategy\022 \n\005debug\030\n"
    " \001(\0132\021.amun.DebugValues\022\034\n\006timing\030\013 \001(\0132"
    "\014.amun.Timing\022*\n\rradio_command\030\014 \003(\0132\023.r"
    "obot.RadioCommand\022,\n\013transceiver\030\r \001(\0132\027"
    ".amun.StatusTransceiver\022(\n\017user_input_bl"
    "ue\030\020 \001(\0132\017.amun.UserInput\022*\n\021user_input_"
    "yellow\030\021 \001(\0132\017.amun.UserInput\022$\n\namun_st"
    "ate\030\023 \001(\0132\020.amun.StatusAmun", 1267);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "status.proto", &protobuf_RegisterTypes);
  StatusStrategy::default_instance_ = new StatusStrategy();
  Timing::default_instance_ = new Timing();
  StatusTransceiver::default_instance_ = new StatusTransceiver();
  PortBindError::default_instance_ = new PortBindError();
  StatusAmun::default_instance_ = new StatusAmun();
  Status::default_instance_ = new Status();
  StatusStrategy::default_instance_->InitAsDefaultInstance();
  Timing::default_instance_->InitAsDefaultInstance();
  StatusTransceiver::default_instance_->InitAsDefaultInstance();
  PortBindError::default_instance_->InitAsDefaultInstance();
  StatusAmun::default_instance_->InitAsDefaultInstance();
  Status::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_status_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_status_2eproto {
  StaticDescriptorInitializer_status_2eproto() {
    protobuf_AddDesc_status_2eproto();
  }
} static_descriptor_initializer_status_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* StatusStrategy_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusStrategy_STATE_descriptor_;
}
bool StatusStrategy_STATE_IsValid(int value) {
  switch(value) {
    case 1:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StatusStrategy_STATE StatusStrategy::CLOSED;
const StatusStrategy_STATE StatusStrategy::RUNNING;
const StatusStrategy_STATE StatusStrategy::FAILED;
const StatusStrategy_STATE StatusStrategy::STATE_MIN;
const StatusStrategy_STATE StatusStrategy::STATE_MAX;
const int StatusStrategy::STATE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StatusStrategy::kStateFieldNumber;
const int StatusStrategy::kFilenameFieldNumber;
const int StatusStrategy::kNameFieldNumber;
const int StatusStrategy::kCurrentEntryPointFieldNumber;
const int StatusStrategy::kEntryPointFieldNumber;
#endif  // !_MSC_VER

StatusStrategy::StatusStrategy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatusStrategy::InitAsDefaultInstance() {
}

StatusStrategy::StatusStrategy(const StatusStrategy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatusStrategy::SharedCtor() {
  _cached_size_ = 0;
  state_ = 1;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  current_entry_point_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusStrategy::~StatusStrategy() {
  SharedDtor();
}

void StatusStrategy::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (current_entry_point_ != &::google::protobuf::internal::kEmptyString) {
    delete current_entry_point_;
  }
  if (this != default_instance_) {
  }
}

void StatusStrategy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusStrategy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusStrategy_descriptor_;
}

const StatusStrategy& StatusStrategy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_status_2eproto();
  return *default_instance_;
}

StatusStrategy* StatusStrategy::default_instance_ = NULL;

StatusStrategy* StatusStrategy::New() const {
  return new StatusStrategy;
}

void StatusStrategy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 1;
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_current_entry_point()) {
      if (current_entry_point_ != &::google::protobuf::internal::kEmptyString) {
        current_entry_point_->clear();
      }
    }
  }
  entry_point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusStrategy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .amun.StatusStrategy.STATE state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::amun::StatusStrategy_STATE_IsValid(value)) {
            set_state(static_cast< ::amun::StatusStrategy_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_filename;
        break;
      }

      // optional string filename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_current_entry_point;
        break;
      }

      // optional string current_entry_point = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_current_entry_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_current_entry_point()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->current_entry_point().data(), this->current_entry_point().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_entry_point;
        break;
      }

      // repeated string entry_point = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_entry_point()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entry_point(this->entry_point_size() - 1).data(),
            this->entry_point(this->entry_point_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_entry_point;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatusStrategy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .amun.StatusStrategy.STATE state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filename(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string current_entry_point = 4;
  if (has_current_entry_point()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->current_entry_point().data(), this->current_entry_point().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->current_entry_point(), output);
  }

  // repeated string entry_point = 5;
  for (int i = 0; i < this->entry_point_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->entry_point(i).data(), this->entry_point(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->entry_point(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatusStrategy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .amun.StatusStrategy.STATE state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string current_entry_point = 4;
  if (has_current_entry_point()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->current_entry_point().data(), this->current_entry_point().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->current_entry_point(), target);
  }

  // repeated string entry_point = 5;
  for (int i = 0; i < this->entry_point_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entry_point(i).data(), this->entry_point(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->entry_point(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatusStrategy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .amun.StatusStrategy.STATE state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional string filename = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string current_entry_point = 4;
    if (has_current_entry_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->current_entry_point());
    }

  }
  // repeated string entry_point = 5;
  total_size += 1 * this->entry_point_size();
  for (int i = 0; i < this->entry_point_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->entry_point(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusStrategy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusStrategy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusStrategy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusStrategy::MergeFrom(const StatusStrategy& from) {
  GOOGLE_CHECK_NE(&from, this);
  entry_point_.MergeFrom(from.entry_point_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_current_entry_point()) {
      set_current_entry_point(from.current_entry_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusStrategy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusStrategy::CopyFrom(const StatusStrategy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusStrategy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StatusStrategy::Swap(StatusStrategy* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(filename_, other->filename_);
    std::swap(name_, other->name_);
    std::swap(current_entry_point_, other->current_entry_point_);
    entry_point_.Swap(&other->entry_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusStrategy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusStrategy_descriptor_;
  metadata.reflection = StatusStrategy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Timing::kBlueTotalFieldNumber;
const int Timing::kBluePathFieldNumber;
const int Timing::kYellowTotalFieldNumber;
const int Timing::kYellowPathFieldNumber;
const int Timing::kTrackingFieldNumber;
const int Timing::kControllerFieldNumber;
const int Timing::kTransceiverFieldNumber;
const int Timing::kTransceiverRttFieldNumber;
const int Timing::kSimulatorFieldNumber;
#endif  // !_MSC_VER

Timing::Timing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Timing::InitAsDefaultInstance() {
}

Timing::Timing(const Timing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Timing::SharedCtor() {
  _cached_size_ = 0;
  blue_total_ = 0;
  blue_path_ = 0;
  yellow_total_ = 0;
  yellow_path_ = 0;
  tracking_ = 0;
  controller_ = 0;
  transceiver_ = 0;
  transceiver_rtt_ = 0;
  simulator_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Timing::~Timing() {
  SharedDtor();
}

void Timing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Timing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Timing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Timing_descriptor_;
}

const Timing& Timing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_status_2eproto();
  return *default_instance_;
}

Timing* Timing::default_instance_ = NULL;

Timing* Timing::New() const {
  return new Timing;
}

void Timing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    blue_total_ = 0;
    blue_path_ = 0;
    yellow_total_ = 0;
    yellow_path_ = 0;
    tracking_ = 0;
    controller_ = 0;
    transceiver_ = 0;
    transceiver_rtt_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    simulator_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Timing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float blue_total = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue_total_)));
          set_has_blue_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_blue_path;
        break;
      }

      // optional float blue_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_blue_path:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue_path_)));
          set_has_blue_path();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_yellow_total;
        break;
      }

      // optional float yellow_total = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yellow_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yellow_total_)));
          set_has_yellow_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_yellow_path;
        break;
      }

      // optional float yellow_path = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yellow_path:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yellow_path_)));
          set_has_yellow_path();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_tracking;
        break;
      }

      // optional float tracking = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tracking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tracking_)));
          set_has_tracking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_transceiver;
        break;
      }

      // optional float transceiver = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_transceiver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &transceiver_)));
          set_has_transceiver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_simulator;
        break;
      }

      // optional float simulator = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_simulator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &simulator_)));
          set_has_simulator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_controller;
        break;
      }

      // optional float controller = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_controller:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &controller_)));
          set_has_controller();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_transceiver_rtt;
        break;
      }

      // optional float transceiver_rtt = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_transceiver_rtt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &transceiver_rtt_)));
          set_has_transceiver_rtt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Timing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float blue_total = 1;
  if (has_blue_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->blue_total(), output);
  }

  // optional float blue_path = 2;
  if (has_blue_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->blue_path(), output);
  }

  // optional float yellow_total = 3;
  if (has_yellow_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->yellow_total(), output);
  }

  // optional float yellow_path = 4;
  if (has_yellow_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->yellow_path(), output);
  }

  // optional float tracking = 5;
  if (has_tracking()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->tracking(), output);
  }

  // optional float transceiver = 6;
  if (has_transceiver()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->transceiver(), output);
  }

  // optional float simulator = 7;
  if (has_simulator()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->simulator(), output);
  }

  // optional float controller = 8;
  if (has_controller()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->controller(), output);
  }

  // optional float transceiver_rtt = 9;
  if (has_transceiver_rtt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->transceiver_rtt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Timing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float blue_total = 1;
  if (has_blue_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->blue_total(), target);
  }

  // optional float blue_path = 2;
  if (has_blue_path()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->blue_path(), target);
  }

  // optional float yellow_total = 3;
  if (has_yellow_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->yellow_total(), target);
  }

  // optional float yellow_path = 4;
  if (has_yellow_path()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->yellow_path(), target);
  }

  // optional float tracking = 5;
  if (has_tracking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->tracking(), target);
  }

  // optional float transceiver = 6;
  if (has_transceiver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->transceiver(), target);
  }

  // optional float simulator = 7;
  if (has_simulator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->simulator(), target);
  }

  // optional float controller = 8;
  if (has_controller()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->controller(), target);
  }

  // optional float transceiver_rtt = 9;
  if (has_transceiver_rtt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->transceiver_rtt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Timing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float blue_total = 1;
    if (has_blue_total()) {
      total_size += 1 + 4;
    }

    // optional float blue_path = 2;
    if (has_blue_path()) {
      total_size += 1 + 4;
    }

    // optional float yellow_total = 3;
    if (has_yellow_total()) {
      total_size += 1 + 4;
    }

    // optional float yellow_path = 4;
    if (has_yellow_path()) {
      total_size += 1 + 4;
    }

    // optional float tracking = 5;
    if (has_tracking()) {
      total_size += 1 + 4;
    }

    // optional float controller = 8;
    if (has_controller()) {
      total_size += 1 + 4;
    }

    // optional float transceiver = 6;
    if (has_transceiver()) {
      total_size += 1 + 4;
    }

    // optional float transceiver_rtt = 9;
    if (has_transceiver_rtt()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float simulator = 7;
    if (has_simulator()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Timing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Timing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Timing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Timing::MergeFrom(const Timing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blue_total()) {
      set_blue_total(from.blue_total());
    }
    if (from.has_blue_path()) {
      set_blue_path(from.blue_path());
    }
    if (from.has_yellow_total()) {
      set_yellow_total(from.yellow_total());
    }
    if (from.has_yellow_path()) {
      set_yellow_path(from.yellow_path());
    }
    if (from.has_tracking()) {
      set_tracking(from.tracking());
    }
    if (from.has_controller()) {
      set_controller(from.controller());
    }
    if (from.has_transceiver()) {
      set_transceiver(from.transceiver());
    }
    if (from.has_transceiver_rtt()) {
      set_transceiver_rtt(from.transceiver_rtt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_simulator()) {
      set_simulator(from.simulator());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Timing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timing::CopyFrom(const Timing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timing::IsInitialized() const {

  return true;
}

void Timing::Swap(Timing* other) {
  if (other != this) {
    std::swap(blue_total_, other->blue_total_);
    std::swap(blue_path_, other->blue_path_);
    std::swap(yellow_total_, other->yellow_total_);
    std::swap(yellow_path_, other->yellow_path_);
    std::swap(tracking_, other->tracking_);
    std::swap(controller_, other->controller_);
    std::swap(transceiver_, other->transceiver_);
    std::swap(transceiver_rtt_, other->transceiver_rtt_);
    std::swap(simulator_, other->simulator_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Timing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Timing_descriptor_;
  metadata.reflection = Timing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatusTransceiver::kActiveFieldNumber;
const int StatusTransceiver::kErrorFieldNumber;
const int StatusTransceiver::kDroppedUsbPacketsFieldNumber;
#endif  // !_MSC_VER

StatusTransceiver::StatusTransceiver()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatusTransceiver::InitAsDefaultInstance() {
}

StatusTransceiver::StatusTransceiver(const StatusTransceiver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatusTransceiver::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dropped_usb_packets_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusTransceiver::~StatusTransceiver() {
  SharedDtor();
}

void StatusTransceiver::SharedDtor() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void StatusTransceiver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusTransceiver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusTransceiver_descriptor_;
}

const StatusTransceiver& StatusTransceiver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_status_2eproto();
  return *default_instance_;
}

StatusTransceiver* StatusTransceiver::default_instance_ = NULL;

StatusTransceiver* StatusTransceiver::New() const {
  return new StatusTransceiver;
}

void StatusTransceiver::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    active_ = false;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
    dropped_usb_packets_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusTransceiver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool active = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dropped_usb_packets;
        break;
      }

      // optional int32 dropped_usb_packets = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropped_usb_packets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropped_usb_packets_)));
          set_has_dropped_usb_packets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatusTransceiver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error(), output);
  }

  // optional int32 dropped_usb_packets = 3;
  if (has_dropped_usb_packets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dropped_usb_packets(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatusTransceiver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // optional int32 dropped_usb_packets = 3;
  if (has_dropped_usb_packets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dropped_usb_packets(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatusTransceiver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional string error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional int32 dropped_usb_packets = 3;
    if (has_dropped_usb_packets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dropped_usb_packets());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusTransceiver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusTransceiver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusTransceiver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusTransceiver::MergeFrom(const StatusTransceiver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_dropped_usb_packets()) {
      set_dropped_usb_packets(from.dropped_usb_packets());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusTransceiver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusTransceiver::CopyFrom(const StatusTransceiver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusTransceiver::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StatusTransceiver::Swap(StatusTransceiver* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(error_, other->error_);
    std::swap(dropped_usb_packets_, other->dropped_usb_packets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusTransceiver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusTransceiver_descriptor_;
  metadata.reflection = StatusTransceiver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PortBindError::kPortFieldNumber;
#endif  // !_MSC_VER

PortBindError::PortBindError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PortBindError::InitAsDefaultInstance() {
}

PortBindError::PortBindError(const PortBindError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PortBindError::SharedCtor() {
  _cached_size_ = 0;
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PortBindError::~PortBindError() {
  SharedDtor();
}

void PortBindError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PortBindError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PortBindError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PortBindError_descriptor_;
}

const PortBindError& PortBindError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_status_2eproto();
  return *default_instance_;
}

PortBindError* PortBindError::default_instance_ = NULL;

PortBindError* PortBindError::New() const {
  return new PortBindError;
}

void PortBindError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PortBindError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 port = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PortBindError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 port = 1;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PortBindError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 port = 1;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PortBindError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 port = 1;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PortBindError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PortBindError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PortBindError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PortBindError::MergeFrom(const PortBindError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PortBindError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortBindError::CopyFrom(const PortBindError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortBindError::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PortBindError::Swap(PortBindError* other) {
  if (other != this) {
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PortBindError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PortBindError_descriptor_;
  metadata.reflection = PortBindError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatusAmun::kPortBindErrorFieldNumber;
#endif  // !_MSC_VER

StatusAmun::StatusAmun()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatusAmun::InitAsDefaultInstance() {
  port_bind_error_ = const_cast< ::amun::PortBindError*>(&::amun::PortBindError::default_instance());
}

StatusAmun::StatusAmun(const StatusAmun& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatusAmun::SharedCtor() {
  _cached_size_ = 0;
  port_bind_error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusAmun::~StatusAmun() {
  SharedDtor();
}

void StatusAmun::SharedDtor() {
  if (this != default_instance_) {
    delete port_bind_error_;
  }
}

void StatusAmun::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusAmun::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusAmun_descriptor_;
}

const StatusAmun& StatusAmun::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_status_2eproto();
  return *default_instance_;
}

StatusAmun* StatusAmun::default_instance_ = NULL;

StatusAmun* StatusAmun::New() const {
  return new StatusAmun;
}

void StatusAmun::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_port_bind_error()) {
      if (port_bind_error_ != NULL) port_bind_error_->::amun::PortBindError::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusAmun::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .amun.PortBindError port_bind_error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_port_bind_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatusAmun::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .amun.PortBindError port_bind_error = 1;
  if (has_port_bind_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->port_bind_error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatusAmun::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .amun.PortBindError port_bind_error = 1;
  if (has_port_bind_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->port_bind_error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatusAmun::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .amun.PortBindError port_bind_error = 1;
    if (has_port_bind_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->port_bind_error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusAmun::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusAmun* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusAmun*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusAmun::MergeFrom(const StatusAmun& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_port_bind_error()) {
      mutable_port_bind_error()->::amun::PortBindError::MergeFrom(from.port_bind_error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusAmun::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusAmun::CopyFrom(const StatusAmun& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusAmun::IsInitialized() const {

  if (has_port_bind_error()) {
    if (!this->port_bind_error().IsInitialized()) return false;
  }
  return true;
}

void StatusAmun::Swap(StatusAmun* other) {
  if (other != this) {
    std::swap(port_bind_error_, other->port_bind_error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusAmun::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusAmun_descriptor_;
  metadata.reflection = StatusAmun_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Status::kTimeFieldNumber;
const int Status::kGameStateFieldNumber;
const int Status::kWorldStateFieldNumber;
const int Status::kGeometryFieldNumber;
const int Status::kTeamBlueFieldNumber;
const int Status::kTeamYellowFieldNumber;
const int Status::kStrategyBlueFieldNumber;
const int Status::kStrategyYellowFieldNumber;
const int Status::kStrategyAutorefFieldNumber;
const int Status::kDebugFieldNumber;
const int Status::kTimingFieldNumber;
const int Status::kRadioCommandFieldNumber;
const int Status::kTransceiverFieldNumber;
const int Status::kUserInputBlueFieldNumber;
const int Status::kUserInputYellowFieldNumber;
const int Status::kAmunStateFieldNumber;
#endif  // !_MSC_VER

Status::Status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Status::InitAsDefaultInstance() {
  game_state_ = const_cast< ::amun::GameState*>(&::amun::GameState::default_instance());
  world_state_ = const_cast< ::world::State*>(&::world::State::default_instance());
  geometry_ = const_cast< ::world::Geometry*>(&::world::Geometry::default_instance());
  team_blue_ = const_cast< ::robot::Team*>(&::robot::Team::default_instance());
  team_yellow_ = const_cast< ::robot::Team*>(&::robot::Team::default_instance());
  strategy_blue_ = const_cast< ::amun::StatusStrategy*>(&::amun::StatusStrategy::default_instance());
  strategy_yellow_ = const_cast< ::amun::StatusStrategy*>(&::amun::StatusStrategy::default_instance());
  strategy_autoref_ = const_cast< ::amun::StatusStrategy*>(&::amun::StatusStrategy::default_instance());
  debug_ = const_cast< ::amun::DebugValues*>(&::amun::DebugValues::default_instance());
  timing_ = const_cast< ::amun::Timing*>(&::amun::Timing::default_instance());
  transceiver_ = const_cast< ::amun::StatusTransceiver*>(&::amun::StatusTransceiver::default_instance());
  user_input_blue_ = const_cast< ::amun::UserInput*>(&::amun::UserInput::default_instance());
  user_input_yellow_ = const_cast< ::amun::UserInput*>(&::amun::UserInput::default_instance());
  amun_state_ = const_cast< ::amun::StatusAmun*>(&::amun::StatusAmun::default_instance());
}

Status::Status(const Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Status::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  game_state_ = NULL;
  world_state_ = NULL;
  geometry_ = NULL;
  team_blue_ = NULL;
  team_yellow_ = NULL;
  strategy_blue_ = NULL;
  strategy_yellow_ = NULL;
  strategy_autoref_ = NULL;
  debug_ = NULL;
  timing_ = NULL;
  transceiver_ = NULL;
  user_input_blue_ = NULL;
  user_input_yellow_ = NULL;
  amun_state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Status::~Status() {
  SharedDtor();
}

void Status::SharedDtor() {
  if (this != default_instance_) {
    delete game_state_;
    delete world_state_;
    delete geometry_;
    delete team_blue_;
    delete team_yellow_;
    delete strategy_blue_;
    delete strategy_yellow_;
    delete strategy_autoref_;
    delete debug_;
    delete timing_;
    delete transceiver_;
    delete user_input_blue_;
    delete user_input_yellow_;
    delete amun_state_;
  }
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}

const Status& Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_status_2eproto();
  return *default_instance_;
}

Status* Status::default_instance_ = NULL;

Status* Status::New() const {
  return new Status;
}

void Status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    if (has_game_state()) {
      if (game_state_ != NULL) game_state_->::amun::GameState::Clear();
    }
    if (has_world_state()) {
      if (world_state_ != NULL) world_state_->::world::State::Clear();
    }
    if (has_geometry()) {
      if (geometry_ != NULL) geometry_->::world::Geometry::Clear();
    }
    if (has_team_blue()) {
      if (team_blue_ != NULL) team_blue_->::robot::Team::Clear();
    }
    if (has_team_yellow()) {
      if (team_yellow_ != NULL) team_yellow_->::robot::Team::Clear();
    }
    if (has_strategy_blue()) {
      if (strategy_blue_ != NULL) strategy_blue_->::amun::StatusStrategy::Clear();
    }
    if (has_strategy_yellow()) {
      if (strategy_yellow_ != NULL) strategy_yellow_->::amun::StatusStrategy::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_strategy_autoref()) {
      if (strategy_autoref_ != NULL) strategy_autoref_->::amun::StatusStrategy::Clear();
    }
    if (has_debug()) {
      if (debug_ != NULL) debug_->::amun::DebugValues::Clear();
    }
    if (has_timing()) {
      if (timing_ != NULL) timing_->::amun::Timing::Clear();
    }
    if (has_transceiver()) {
      if (transceiver_ != NULL) transceiver_->::amun::StatusTransceiver::Clear();
    }
    if (has_user_input_blue()) {
      if (user_input_blue_ != NULL) user_input_blue_->::amun::UserInput::Clear();
    }
    if (has_user_input_yellow()) {
      if (user_input_yellow_ != NULL) user_input_yellow_->::amun::UserInput::Clear();
    }
    if (has_amun_state()) {
      if (amun_state_ != NULL) amun_state_->::amun::StatusAmun::Clear();
    }
  }
  radio_command_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_world_state;
        break;
      }

      // optional .world.State world_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_world_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_world_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_geometry;
        break;
      }

      // optional .world.Geometry geometry = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_team_blue;
        break;
      }

      // optional .robot.Team team_blue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_blue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_blue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_team_yellow;
        break;
      }

      // optional .robot.Team team_yellow = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_yellow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_yellow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_strategy_blue;
        break;
      }

      // optional .amun.StatusStrategy strategy_blue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strategy_blue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strategy_blue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_strategy_yellow;
        break;
      }

      // optional .amun.StatusStrategy strategy_yellow = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strategy_yellow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strategy_yellow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_debug;
        break;
      }

      // optional .amun.DebugValues debug = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_timing;
        break;
      }

      // optional .amun.Timing timing = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_radio_command;
        break;
      }

      // repeated .robot.RadioCommand radio_command = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_radio_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_radio_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_radio_command;
        if (input->ExpectTag(106)) goto parse_transceiver;
        break;
      }

      // optional .amun.StatusTransceiver transceiver = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transceiver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transceiver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_game_state;
        break;
      }

      // optional .amun.GameState game_state = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_user_input_blue;
        break;
      }

      // optional .amun.UserInput user_input_blue = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_input_blue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_input_blue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_user_input_yellow;
        break;
      }

      // optional .amun.UserInput user_input_yellow = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_input_yellow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_input_yellow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_strategy_autoref;
        break;
      }

      // optional .amun.StatusStrategy strategy_autoref = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strategy_autoref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strategy_autoref()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_amun_state;
        break;
      }

      // optional .amun.StatusAmun amun_state = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_amun_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_amun_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional .world.State world_state = 3;
  if (has_world_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->world_state(), output);
  }

  // optional .world.Geometry geometry = 4;
  if (has_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->geometry(), output);
  }

  // optional .robot.Team team_blue = 5;
  if (has_team_blue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->team_blue(), output);
  }

  // optional .robot.Team team_yellow = 6;
  if (has_team_yellow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->team_yellow(), output);
  }

  // optional .amun.StatusStrategy strategy_blue = 7;
  if (has_strategy_blue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->strategy_blue(), output);
  }

  // optional .amun.StatusStrategy strategy_yellow = 8;
  if (has_strategy_yellow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->strategy_yellow(), output);
  }

  // optional .amun.DebugValues debug = 10;
  if (has_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->debug(), output);
  }

  // optional .amun.Timing timing = 11;
  if (has_timing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->timing(), output);
  }

  // repeated .robot.RadioCommand radio_command = 12;
  for (int i = 0; i < this->radio_command_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->radio_command(i), output);
  }

  // optional .amun.StatusTransceiver transceiver = 13;
  if (has_transceiver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->transceiver(), output);
  }

  // optional .amun.GameState game_state = 15;
  if (has_game_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->game_state(), output);
  }

  // optional .amun.UserInput user_input_blue = 16;
  if (has_user_input_blue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->user_input_blue(), output);
  }

  // optional .amun.UserInput user_input_yellow = 17;
  if (has_user_input_yellow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->user_input_yellow(), output);
  }

  // optional .amun.StatusStrategy strategy_autoref = 18;
  if (has_strategy_autoref()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->strategy_autoref(), output);
  }

  // optional .amun.StatusAmun amun_state = 19;
  if (has_amun_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->amun_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional .world.State world_state = 3;
  if (has_world_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->world_state(), target);
  }

  // optional .world.Geometry geometry = 4;
  if (has_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->geometry(), target);
  }

  // optional .robot.Team team_blue = 5;
  if (has_team_blue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->team_blue(), target);
  }

  // optional .robot.Team team_yellow = 6;
  if (has_team_yellow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->team_yellow(), target);
  }

  // optional .amun.StatusStrategy strategy_blue = 7;
  if (has_strategy_blue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->strategy_blue(), target);
  }

  // optional .amun.StatusStrategy strategy_yellow = 8;
  if (has_strategy_yellow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->strategy_yellow(), target);
  }

  // optional .amun.DebugValues debug = 10;
  if (has_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->debug(), target);
  }

  // optional .amun.Timing timing = 11;
  if (has_timing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->timing(), target);
  }

  // repeated .robot.RadioCommand radio_command = 12;
  for (int i = 0; i < this->radio_command_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->radio_command(i), target);
  }

  // optional .amun.StatusTransceiver transceiver = 13;
  if (has_transceiver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->transceiver(), target);
  }

  // optional .amun.GameState game_state = 15;
  if (has_game_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->game_state(), target);
  }

  // optional .amun.UserInput user_input_blue = 16;
  if (has_user_input_blue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->user_input_blue(), target);
  }

  // optional .amun.UserInput user_input_yellow = 17;
  if (has_user_input_yellow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->user_input_yellow(), target);
  }

  // optional .amun.StatusStrategy strategy_autoref = 18;
  if (has_strategy_autoref()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->strategy_autoref(), target);
  }

  // optional .amun.StatusAmun amun_state = 19;
  if (has_amun_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->amun_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional .amun.GameState game_state = 15;
    if (has_game_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_state());
    }

    // optional .world.State world_state = 3;
    if (has_world_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->world_state());
    }

    // optional .world.Geometry geometry = 4;
    if (has_geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geometry());
    }

    // optional .robot.Team team_blue = 5;
    if (has_team_blue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_blue());
    }

    // optional .robot.Team team_yellow = 6;
    if (has_team_yellow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_yellow());
    }

    // optional .amun.StatusStrategy strategy_blue = 7;
    if (has_strategy_blue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->strategy_blue());
    }

    // optional .amun.StatusStrategy strategy_yellow = 8;
    if (has_strategy_yellow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->strategy_yellow());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .amun.StatusStrategy strategy_autoref = 18;
    if (has_strategy_autoref()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->strategy_autoref());
    }

    // optional .amun.DebugValues debug = 10;
    if (has_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->debug());
    }

    // optional .amun.Timing timing = 11;
    if (has_timing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timing());
    }

    // optional .amun.StatusTransceiver transceiver = 13;
    if (has_transceiver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transceiver());
    }

    // optional .amun.UserInput user_input_blue = 16;
    if (has_user_input_blue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_input_blue());
    }

    // optional .amun.UserInput user_input_yellow = 17;
    if (has_user_input_yellow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_input_yellow());
    }

    // optional .amun.StatusAmun amun_state = 19;
    if (has_amun_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->amun_state());
    }

  }
  // repeated .robot.RadioCommand radio_command = 12;
  total_size += 1 * this->radio_command_size();
  for (int i = 0; i < this->radio_command_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->radio_command(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  radio_command_.MergeFrom(from.radio_command_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_game_state()) {
      mutable_game_state()->::amun::GameState::MergeFrom(from.game_state());
    }
    if (from.has_world_state()) {
      mutable_world_state()->::world::State::MergeFrom(from.world_state());
    }
    if (from.has_geometry()) {
      mutable_geometry()->::world::Geometry::MergeFrom(from.geometry());
    }
    if (from.has_team_blue()) {
      mutable_team_blue()->::robot::Team::MergeFrom(from.team_blue());
    }
    if (from.has_team_yellow()) {
      mutable_team_yellow()->::robot::Team::MergeFrom(from.team_yellow());
    }
    if (from.has_strategy_blue()) {
      mutable_strategy_blue()->::amun::StatusStrategy::MergeFrom(from.strategy_blue());
    }
    if (from.has_strategy_yellow()) {
      mutable_strategy_yellow()->::amun::StatusStrategy::MergeFrom(from.strategy_yellow());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_strategy_autoref()) {
      mutable_strategy_autoref()->::amun::StatusStrategy::MergeFrom(from.strategy_autoref());
    }
    if (from.has_debug()) {
      mutable_debug()->::amun::DebugValues::MergeFrom(from.debug());
    }
    if (from.has_timing()) {
      mutable_timing()->::amun::Timing::MergeFrom(from.timing());
    }
    if (from.has_transceiver()) {
      mutable_transceiver()->::amun::StatusTransceiver::MergeFrom(from.transceiver());
    }
    if (from.has_user_input_blue()) {
      mutable_user_input_blue()->::amun::UserInput::MergeFrom(from.user_input_blue());
    }
    if (from.has_user_input_yellow()) {
      mutable_user_input_yellow()->::amun::UserInput::MergeFrom(from.user_input_yellow());
    }
    if (from.has_amun_state()) {
      mutable_amun_state()->::amun::StatusAmun::MergeFrom(from.amun_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_game_state()) {
    if (!this->game_state().IsInitialized()) return false;
  }
  if (has_world_state()) {
    if (!this->world_state().IsInitialized()) return false;
  }
  if (has_geometry()) {
    if (!this->geometry().IsInitialized()) return false;
  }
  if (has_team_blue()) {
    if (!this->team_blue().IsInitialized()) return false;
  }
  if (has_team_yellow()) {
    if (!this->team_yellow().IsInitialized()) return false;
  }
  if (has_strategy_blue()) {
    if (!this->strategy_blue().IsInitialized()) return false;
  }
  if (has_strategy_yellow()) {
    if (!this->strategy_yellow().IsInitialized()) return false;
  }
  if (has_strategy_autoref()) {
    if (!this->strategy_autoref().IsInitialized()) return false;
  }
  if (has_debug()) {
    if (!this->debug().IsInitialized()) return false;
  }
  for (int i = 0; i < radio_command_size(); i++) {
    if (!this->radio_command(i).IsInitialized()) return false;
  }
  if (has_transceiver()) {
    if (!this->transceiver().IsInitialized()) return false;
  }
  if (has_user_input_blue()) {
    if (!this->user_input_blue().IsInitialized()) return false;
  }
  if (has_user_input_yellow()) {
    if (!this->user_input_yellow().IsInitialized()) return false;
  }
  if (has_amun_state()) {
    if (!this->amun_state().IsInitialized()) return false;
  }
  return true;
}

void Status::Swap(Status* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(game_state_, other->game_state_);
    std::swap(world_state_, other->world_state_);
    std::swap(geometry_, other->geometry_);
    std::swap(team_blue_, other->team_blue_);
    std::swap(team_yellow_, other->team_yellow_);
    std::swap(strategy_blue_, other->strategy_blue_);
    std::swap(strategy_yellow_, other->strategy_yellow_);
    std::swap(strategy_autoref_, other->strategy_autoref_);
    std::swap(debug_, other->debug_);
    std::swap(timing_, other->timing_);
    radio_command_.Swap(&other->radio_command_);
    std::swap(transceiver_, other->transceiver_);
    std::swap(user_input_blue_, other->user_input_blue_);
    std::swap(user_input_yellow_, other->user_input_yellow_);
    std::swap(amun_state_, other->amun_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Status_descriptor_;
  metadata.reflection = Status_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace amun

// @@protoc_insertion_point(global_scope)
